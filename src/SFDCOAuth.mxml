<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:skins="skins.*"
					   applicationComplete="initArgs()"
					   width="400"
					   height="580">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.force.oauth.OAuthConnection;
			import com.force.oauth.OAuthRemoteServices;
			import com.force.oauth.OAuthConfigBuilder;
			
			import mx.controls.Alert;
			import mx.rpc.AsyncResponder;
			import mx.utils.ObjectUtil;
			
			private var oauth:OAuthConnection;
			
			[Bindable]
			public var textAreaSFDC:String = "Logged into Salesforce!";
			
			//--------------------------------------------------------------------------------
			// Command line arguments
			// -s serverName - the server name identifies which client key and secret to use
			// -a authType   - Two types "agent" or "web" 
			// -r  boolean   -  "agent" with trusted remote collaboration
			//                 "true"  = send login registration and refresh request to noxaos server
			//                 "false" = all OAuth is on the client/agent
			//--------------------------------------------------------------------------------
			private function onInvoke(e:InvokeEvent):void {
				var i:int = 0;
				for (i=0; i < e.arguments.length; i++) {
					trace("Command line arg: " + i + " value: " + e.arguments[i]);  
					if (e.arguments[i] == "-s") { 
						OAuthRemoteServices.sfdcServer = e.arguments[i+1];
					} else if (e.arguments[i] == "-a") {
						OAuthRemoteServices.oAuthType = e.arguments[i+1];
					} else if (e.arguments[i] == "-r") {
						if (e.arguments[i+1].toLowerCase() == "true") {
							OAuthRemoteServices.remoteService = true;
						} else {
							OAuthRemoteServices.remoteService = false;
						}
					}
				}
				initApp();
			}

			private function initArgs():void {
				trace("In Init");
				OAuthConfigBuilder.build();
				NativeApplication.nativeApplication.addEventListener(InvokeEvent.INVOKE, onInvoke);
			}
			
			private function initApp():void {
				if ( OAuthRemoteServices.sfdcServer == null ) {
					OAuthRemoteServices.sfdcServer = "rdbdemo";
				}
				login();
			}
			
			private function login():void {
				this.oauth = OAuthConnection.login(this.stage, new mx.rpc.AsyncResponder(loginSuccess, loginError));
				if ( this.oauth.isLoggedIn() ) {
					this.loginInit();
				}
			}
			
			private function loginInit():void {
				this.currentState = "default";
				this.textAreaSFDC = "Logged into Salesforce!";
			}
			
			public function loginSuccess(loginResult:Object, token:Object):void {
				trace("login success");
				loginInit();
			}
			
			public  function loginError(error:Object, token:Object = null):void {
				trace("login error");
				Alert.show(ObjectUtil.toString(error),"Login Failure");
			}
			
			private function clickLogin(event:MouseEvent):void {
				trace("Click called clickLogin()");
				this.login();	
			}
			
			private function clickLogout(event:MouseEvent):void {
				trace("Click called clickLogout()");
				this.currentState = "login";
				this.textAreaSFDC = "Logged Out of Salesforce";
				this.oauth.deleteCredentials();	
			}
			
		]]>
	</fx:Script>
	
	<!-- The Application class states property defines the view states.-->
	<s:states>
		<s:State name="default"/>   
		<s:State name="login"/>
	</s:states>
	<s:layout>
		<s:VerticalLayout/>
	</s:layout> 
	<!-- Set title of the Panel container based on the view state.-->
	<s:Panel id="OAuthTestWin" 
			 title="OAuth Test" title.login="OAuth">
		<s:VGroup left="10" right="10" top="10" bottom="10" id="OAuthGroup">
			<s:TextArea id="textSFDC" 
					width="380" height="480" 
					text = "{textAreaSFDC}"/>
			<s:HGroup>
				<s:Button id="loginButton" 
						  label="Logout" label.login="Login" click="clickLogout(event)" click.login="clickLogin(event)" />
			</s:HGroup>
		</s:VGroup>
	</s:Panel>
</s:WindowedApplication>
